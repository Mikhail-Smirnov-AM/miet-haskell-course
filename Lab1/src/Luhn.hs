module Luhn where

-- Проверка корректности номера банковской карты алгоритмом Луна https://ru.wikipedia.org/wiki/Алгоритм_Луна.
-- Алгоритм:
-- 1. Все цифры, стоящие на чётных местах (считая с конца), удваиваются. Если при этом получается число, большее 9, то из него вычитается 9. Цифры, стояшие на нечётных местах, не изменяются.
-- То есть: последняя цифра не меняется; предпоследнее удваивается; 3-е с конца (предпредпоследнее) не меняется; 4-е с конца удваивается и т.д.
-- 2. Все полученные числа складываются.
-- 3. Если полученная сумма кратна 10, то исходный список корректен.

-- Не пытайтесь собрать всё в одну функцию, используйте вспомогательные.
-- Например: разбить число на цифры (возможно, сразу в обратном порядке).
-- Не забудьте добавить тесты, в том числе для вспомогательных функций!

-- составление списка из цифр номера карты (в обратном порядке)
intToList :: Int -> [Int]
intToList x =  if x < 10 
               then x:[]
               else (mod x 10):(intToList (div x 10))

-- удвоение цифр, стоящих на четных позициях с конца
double_digits :: [Int] -> [Int]
double_digits [] = []
double_digits (x0:[]) = x0:[]
double_digits (x0:x1:xs) = x0:(if new_x1 > 9 then new_x1-9 else new_x1):(double_digits xs)
                            where new_x1 = 2*x1

-- проверка корректности номера карты
isLuhnValid :: Int -> Bool
isLuhnValid x = if x < 0 
                then False
                else if (mod (sum (double_digits (intToList x))) 10) == 0
                     then True
                     else False 
